name: Python Code Analysis

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.py'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.py'
  workflow_dispatch:

# Give the default GITHUB_TOKEN write permission to commit and push changes
permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  analyze:
    name: Analyze Python Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to get git history for proper diffing

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Start Ollama service
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        ollama serve &
        sleep 10  # Give Ollama some time to start
        ollama pull llama2

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run code analysis and generate documentation
      id: analysis
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Run the analysis
        python -m src.action
        
        # Check if any documentation was generated
        if [ -n "$(find docs -name '*.docx' -type f -print -quit)" ]; then
          echo "documentation_generated=true" >> $GITHUB_OUTPUT
        else
          echo "documentation_generated=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push documentation
      if: steps.analysis.outputs.documentation_generated == 'true' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Stage only the docx files
        git add docs/*.docx
        
        # Check if there are changes to commit
        if ! git diff --cached --quiet; then
          git commit -m "docs: Update generated documentation [skip ci]"
          git push
          echo "Documentation updated and pushed successfully"
        else
          echo "No documentation changes to commit"
        fi
