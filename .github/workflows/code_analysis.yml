name: Python Code Analysis

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.py'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.py'
  workflow_dispatch:

# Give the default GITHUB_TOKEN write permission to commit and push changes
permissions:
  contents: write

jobs:
  analyze:
    name: Analyze Python Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Start Ollama service
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        ollama serve &
        sleep 10  # Give Ollama some time to start
        ollama pull llama2

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run code analysis and generate documentation
      run: |
        python -m src.action
        
        # Only proceed if we're on the main branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          # Configure Git with token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Add and commit changes
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          
          # Create docs directory if it doesn't exist
          mkdir -p docs
          
          # Add and commit any new documentation files
          git add docs/*.docx 2>/dev/null || echo "No docx files to add"
          
          # Check if there are changes to commit
          if ! git diff --quiet && ! git diff --staged --quiet; then
            git commit -m "docs: Update generated documentation [skip ci]"
            git push
          else
            echo "No documentation changes to commit"
          fi
        else
          echo "Not on main branch, skipping documentation update"
        fi
